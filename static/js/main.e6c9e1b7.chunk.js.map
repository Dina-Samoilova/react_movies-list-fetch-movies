{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","api.ts","components/FindMovie/FindMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","props","movie","className","Poster","src","alt","Title","Plot","MoviesList","movies","map","imdbID","request","title","fetch","then","response","ok","json","Promise","reject","Error","status","statusText","FindMovie","onAddMovie","useState","setTitle","setMovie","notFound","setNotFound","loadMovie","event","a","preventDefault","findMovie","onSubmit","htmlFor","type","id","placeholder","value","classNames","onChange","target","onClick","App","setMovies","every","film","prevState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e6c9e1b7.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie;\n};\n\nexport const MovieCard: React.FC<Props> = (props) => {\n  const { movie } = props;\n\n  return (\n    <div className=\"card\">\n      <div className=\"card-image\">\n        <figure className=\"image is-4by3\">\n          {movie.Poster && (\n            <img\n              src={movie.Poster}\n              alt=\"Film logo\"\n            />\n          )}\n\n        </figure>\n      </div>\n      <div className=\"card-content\">\n        <div className=\"media\">\n          <div className=\"media-left\">\n            <figure className=\"image is-48x48\">\n              <img\n                src=\"images/imdb-logo.jpeg\"\n                alt=\"imdb\"\n              />\n            </figure>\n          </div>\n          <div className=\"media-content\">\n            <p className=\"title is-8\">{movie.Title}</p>\n          </div>\n        </div>\n\n        <div className=\"content\">\n          {movie.Plot}\n          <br />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = (props) => {\n  const { movies } = props;\n\n  return (\n    <div className=\"movies\">\n      {movies.map(movie => (\n        <MovieCard\n          key={movie.imdbID}\n          movie={movie}\n        />\n      ))}\n    </div>\n  );\n};\n","const BASE_URL = 'https://www.omdbapi.com/?apikey=f23c7f6&t';\n\nexport const request = (title: string) => {\n  return fetch(`${BASE_URL}=${title}`)\n    .then(response => {\n      if (!response.ok) {\n        return Promise.reject(\n          new Error(`${response.status} - ${response.statusText}`),\n        );\n      }\n\n      return response.json();\n    });\n};\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { request } from '../../api';\n\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  onAddMovie: (movie: Movie) => void,\n};\n\nexport const FindMovie: React.FC<Props> = ({ onAddMovie }) => {\n  const [title, setTitle] = useState('');\n  const [movie, setMovie] = useState<Movie>({\n    Poster: '',\n    Title: '',\n    Plot: '',\n    imdbID: '',\n  });\n  const [notFound, setNotFound] = useState(false);\n\n  const inputTitle = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setNotFound(false);\n  };\n\n  const loadMovie = async (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const findMovie = await request(title);\n\n    if (findMovie.Error) {\n      setNotFound(true);\n      setMovie({\n        Poster: '',\n        Title: '',\n        Plot: '',\n        imdbID: '',\n      });\n    } else {\n      setMovie(findMovie);\n      setTitle('');\n    }\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={loadMovie}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              value={title}\n              className={classNames(\n                'input',\n                { 'is-danger': notFound },\n              )}\n              onChange={inputTitle}\n            />\n          </div>\n\n          {notFound && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-light\"\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={() => onAddMovie(movie)}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        <MovieCard movie={movie} />\n      </div>\n    </>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\n\nexport const App: React.FC<{}> = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const onAdd = (movie: Movie) => {\n    if (movies.every(film => film.imdbID !== movie.imdbID)) {\n      setMovies(prevState => {\n        return [...prevState, movie];\n      });\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie onAddMovie={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}